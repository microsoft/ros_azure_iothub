#!/usr/bin/env python
'''
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *
 *  Where noted, some portions of this project are reused under the MIT license from
 *  https://github.com/groove-x/mqtt_bridge
 *
 *
 *  IoT Hub Relay Node for ROS1-based devices (rospy)
 *  + Publishes content from chosen ROS topics to IoT Hub via JSON encapsulation
 *  + Publishes content from IoT Hub to ROS topics via JSON encapsulation
 *  + Executes commands from IoT Hub using ROS services
 *  + Leverages Device Twin features to handle server-orchestrated subscriptions
 *
 *  Device Twin 'Desired' properties must contain (for example):
 *  "ros_relays": {
 *      "0": {
 *          "topic": "rosout",
 *          "msg_type": "rosgraph_msgs.msg:Log"
 *          "relay_mode": 2
 *       },
 *      "1": {
 *          "topic": "other_topic",
 *          "msg_type": "other_module.msg:ModuleMessage"
 *          "relay_mode": 3
 *       }
 *  }
 *
 *  Key for relay entry (in this example "0" and "1") must only be unique -- otherwise it is unused.
 *
 *  Note: "relay_mode" parameter is one of:
 *    1: Relay traffic from IoT Hub to ROS on this topic
 *    2: Relay traffic from ROS to IoT Hub on this topic
 *    3: Relay traffic from IoT Hub to ROS, and from ROS to IoT Hub on this topic
 *--------------------------------------------------------------------------------------------*/
'''

from __future__ import absolute_import
from importlib import import_module
import os.path
import sys

try:
    from iothub_client import IoTHubClient, IoTHubTransportProvider
    from iothub_client import IoTHubMessage, IoTHubMessageDispositionResult, DeviceMethodReturnValue, IoTHubTwinUpdateState
except ImportError as e:
    if "libboost" in e.message:
        print "FATAL: libboost mismatch. Current versions of Azure IoT Hub Device SDK are built against libboost 1.54; either compile the library"
        print "       from source against this system's libraries or install libboost 1.54."
    else:
        print "FATAL: Could not find iothub_client.so on PATH. This may mean pip installation of the azure-iothub-device-client package has failed."
        print "       Please copy the iothub_client.so file into a directory on the PATH, or the working directory of this script."
    print ""
    print e
    sys.exit()

import argparse
import json
import threading
import rospy
from rosbridge_library.internal import message_conversion
from rosbridge_library.internal.services import ServiceCaller

PROTOCOL = IoTHubTransportProvider.MQTT
RECEIVE_CONTEXT = 0
TWIN_CONTEXT = 0
METHOD_CONTEXT = 0

# From github.com/groove-x/mqtt_bridge
def lookup_object(object_path, package='IoTHubRelayNode'):
    module_name, obj_name = object_path.split(":")
    module = import_module(module_name, package)
    obj = getattr(module, obj_name)
    return obj

# From github.com/groove-x/mqtt_bridge
def monkey_patch_message_conversion():
    u""" modify _to_primitive_inst to distinct unicode and str conversion """
    from rosbridge_library.internal.message_conversion import (
        type_map, primitive_types, string_types, FieldTypeMismatchException,
    )
    def _to_primitive_inst(msg, rostype, roottype, stack):
        # Typecheck the msg
        msgtype = type(msg)
        if msgtype in primitive_types and rostype in type_map[msgtype.__name__]:
            return msg
        elif msgtype is unicode and rostype in type_map[msgtype.__name__]:
            return msg.encode("utf-8", "ignore")
        elif msgtype is str and rostype in type_map[msgtype.__name__]:
            return msg.decode("utf-8").encode("utf-8", "ignore")
        raise FieldTypeMismatchException(roottype, stack, rostype, msgtype)
    message_conversion._to_primitive_inst = _to_primitive_inst

monkey_patch_message_conversion()

class RelayEntity(object):
    RELAY_MODE_BIDIRECTIONAL = 3
    RELAY_MODE_TO_IOT_HUB = 2
    RELAY_MODE_TO_ROS = 1

    def __init__(self, coordinator, topic, msg_type, relay_mode):
        if not issubclass(lookup_object(msg_type), rospy.Message):
            raise TypeError("Topic %s specified with invalid ROS message type '%s'. Type must subclass rospy.Message." % (topic, msg_type))
        self.topic = topic
        self.msg_type = msg_type
        self.relay_mode = relay_mode
        self.coordinator = coordinator
        self.ros_publisher = None
        self.ros_subscriber = None
        self.rebind()

    def rebind(self):
        if self.ros_publisher is not None:
            self.ros_publisher.unregister()
            self.ros_publisher = None

        if self.ros_subscriber is not None:
            self.ros_subscriber.unregister()
            self.ros_subscriber = None

        if self.relay_mode == RelayEntity.RELAY_MODE_BIDIRECTIONAL or self.relay_mode == RelayEntity.RELAY_MODE_TO_ROS:
            self.ros_publisher = rospy.Publisher(self.topic, lookup_object(self.msg_type), queue_size=rospy.get_param("~iot_hub_relay_queue_size"))
        if self.relay_mode == RelayEntity.RELAY_MODE_BIDIRECTIONAL or self.relay_mode == RelayEntity.RELAY_MODE_TO_IOT_HUB:
            def _msg_from_ros_callback(msg): # ROS -> IoT Hub (via ROS Subscriber)
                raw_msg = {'topic': self.topic, 'msg_type': self.msg_type, 'payload': message_conversion.extract_values(msg)}
                rospy.logdebug("Publishing ROS message to IoT Hub: %s" % raw_msg)
                self.coordinator.send_iot_hub_message(self.topic, raw_msg)
            self.ros_subscriber = rospy.Subscriber(self.topic, lookup_object(self.msg_type), _msg_from_ros_callback)

    def process_message_from_iot_hub(self, topic, msg_type, payload): # IoT Hub -> ROS (via ROS Publisher)
        if topic != self.topic or str(msg_type) != self.msg_type:
            rospy.logerr("Received IoT Hub message on topic %s with type %s, but expected topic %s with type %s." %  (topic, str(msg_type), self.topic, self.msg_type))
            return False

        ros_msg = message_conversion.populate_instance(payload, lookup_object(msg_type)())
        self.ros_publisher.publish(ros_msg)
        return True

class IoTHubRelayNode(object):
    def _iot_hub_device_method_callback(self, method_name, payload, user_context):
        method_args = json.loads(payload)
        result_payload = [0, 0] # Using an array to allow for mutability inside the callbacks
        evt = threading.Event() # Event semaphore to run these callbacks inline of the request

        def _iot_hub_device_method_success_callback(payload):
            result_payload[0] = True
            result_payload[1] = payload
            evt.set()
        def _iot_hub_device_method_failure_callback(payload):
            result_payload[0] = False
            if isinstance(payload, Exception):
                result_payload[1] = str(payload)
            else:
                result_payload[1] = payload
            evt.set()

        rospy.logdebug("Device method [%s] called. JSON payload is: %s" % (method_name, payload))

        caller = ServiceCaller(method_name, method_args, _iot_hub_device_method_success_callback, _iot_hub_device_method_failure_callback)
        caller.start()

        evt.wait() # wait for the callback to fire

        rospy.logdebug("Device method [%s] callback received from ROS. Firing response (%s, %s) to IoT Hub..." % (method_name, result_payload[0], result_payload[1]))

        device_method_return_value = DeviceMethodReturnValue()
        device_method_return_value.response = json.dumps(result_payload[1])
        if result_payload[0] is True:
            device_method_return_value.status = rospy.get_param("~device_method_success_code")
        else:
            device_method_return_value.status = rospy.get_param("~device_method_failure_code")
        return device_method_return_value

    def _iot_hub_device_twin_callback(self, update_state, payload, user_context):
        rospy.logdebug("Device twin update [%s] called. JSON payload is: %s" % (update_state, payload))
        if update_state == IoTHubTwinUpdateState.COMPLETE:
            json_payload = json.loads(payload)['desired']
        else:
            json_payload = json.loads(payload)

        if 'ros_relays' in json_payload:
            for key, value in json_payload['ros_relays'].iteritems():
                # Key is arbitrary, value contains payload struct
                topic = value['topic']
                msg_type = value['msg_type']
                relay_mode = value['relay_mode']

                rospy.logdebug("Relay requested for topic '%s' (%s) - Relay mode %s" % (topic, msg_type, relay_mode))

                if isinstance(value['relay_mode'], int) and value['relay_mode'] > 0 and value['relay_mode'] < 4:
                    relay_mode = value['relay_mode']
                elif str(relay_mode).isdigit() and int(value['relay_mode']) > 0 and int(value['relay_mode']) < 4:
                    relay_mode = int(value['relay_mode'])
                else:
                    if relay_mode == "RELAY_MODE_BIDIRECTIONAL":
                        relay_mode = RelayEntity.RELAY_MODE_BIDIRECTIONAL
                    elif relay_mode == "RELAY_MODE_TO_IOT_HUB":
                        relay_mode = RelayEntity.RELAY_MODE_TO_IOT_HUB
                    elif relay_mode == "RELAY_MODE_TO_ROS":
                        relay_mode = RelayEntity.RELAY_MODE_TO_IOT_HUB
                    else:
                        rospy.logerr("Relay mode for topic '%s' specified as '%s', which is not a supported value." % (topic, value['relay_mode']))
                        continue
                self.register_relay(topic, msg_type, relay_mode)
        self.save_relays()

    def _iot_hub_incoming_message_callback(self, msg, counter):
        try:
            message_buffer = msg.get_bytearray()
            size = len(message_buffer)
            msg_str = message_buffer[:size].decode('utf-8')
            rospy.logdebug("Message received from IoT Hub. JSON payload is: %s" % msg_str)
            msg_dict = json.loads(msg_str)

            relay = self.get_relay_by_topic(msg_dict['topic'])
            if relay is None:
                relay = self.register_relay(msg_dict['topic'], msg_dict['msg_type'], RelayEntity.RELAY_MODE_TO_ROS)

            result = relay.process_message_from_iot_hub(msg_dict['topic'], msg_dict['msg_type'], msg_dict['payload'])
            counter += 1
            if result is True:
                return IoTHubMessageDispositionResult.ACCEPTED
            else:
                return IoTHubMessageDispositionResult.REJECTED
        except Exception as e:
            counter += 1
            rospy.logerr("IoT Hub message rejected: %s" % e)
            return IoTHubMessageDispositionResult.REJECTED

    def get_relay_by_topic(self, topic):
        try:
            return next((x for x in self._relays if x.topic == topic))
        except StopIteration:
            return None

    def register_relay(self, topic, msg_type, relay_mode):
        topic_matched_entity = self.get_relay_by_topic(topic)
        if topic_matched_entity is None:
            topic_matched_entity = RelayEntity(self, topic, str(msg_type), relay_mode)
            self._relays.append(topic_matched_entity)
            rospy.logdebug("Generated relay entity for topic '%s' (%s) - Relay mode %s" % (topic, msg_type, relay_mode))
        elif topic_matched_entity.relay_mode != RelayEntity.RELAY_MODE_BIDIRECTIONAL and topic_matched_entity.relay_mode != relay_mode:
            topic_matched_entity.relay_mode = relay_mode
            topic_matched_entity.rebind()
            rospy.logdebug("Rebound relay entity for topic '%s' (%s) - Relay mode %s" % (topic, msg_type, relay_mode))

        self.save_relays()

        return topic_matched_entity

    def save_relays(self):
        persisted_relays = []
        for relay in self._relays:
            persisted_relays.append({"topic":relay.topic, "msg_type":relay.msg_type, "relay_mode":relay.relay_mode})
        rospy.set_param("~persist", persisted_relays)
        os.system("rosparam dump %s /%s/persist" % (rospy.get_param("~prefs_storage_file"), self.node_name))

    def load_relays(self):
        os.system("rosparam load %s /%s/persist" % (rospy.get_param("~prefs_storage_file"), self.node_name))
        if rospy.has_param("~persist"):
            persisted_relays = rospy.get_param("~persist")
            for relay in persisted_relays:
                self.register_relay(relay['topic'], relay['msg_type'], relay['relay_mode'])
                rospy.loginfo("Adding cached relay for %s (%s) - Mode %s" % (relay['topic'], relay['msg_type'], relay['relay_mode']))

    def __init__(self, node_name, connection_string):
        self.node_name = node_name
        self._relays = []
        self._persistence = []
        self._counter = 0

        self._client = IoTHubClient(connection_string, PROTOCOL)
        if self._client.protocol == IoTHubTransportProvider.HTTP:
            self._client.set_option("timeout", rospy.get_param("~timeout"))
            self._client.set_option("MinimumPollingTime", rospy.get_param("~minimum_polling_time"))

        self._client.set_option("messageTimeout", rospy.get_param("~message_timeout"))

        if self._client.protocol == IoTHubTransportProvider.MQTT:
            self._client.set_option("logtrace", 0)

        if self._client.protocol == IoTHubTransportProvider.MQTT or self._client.protocol == IoTHubTransportProvider.MQTT_WS:
            self._client.set_device_twin_callback(self._iot_hub_device_twin_callback, TWIN_CONTEXT)
            self._client.set_device_method_callback(self._iot_hub_device_method_callback, METHOD_CONTEXT)

        self._client.set_message_callback(self._iot_hub_incoming_message_callback, RECEIVE_CONTEXT)

        rospy.loginfo("Loading relay bridges from rosparam...")
        self.load_relays()

    def send_iot_hub_message(self, topic, raw_msg):
        def _iot_hub_confirmation_callback(message, result, user_context):
            pass
        msg = IoTHubMessage(json.dumps(raw_msg))
        msg_props = msg.properties()
        msg_props.add('topic', str(topic))
        self._client.send_event_async(msg, _iot_hub_confirmation_callback, self._counter)

def run_iot_hub_relay(node_name='ros_azure_iothub'):
    rospy.init_node(node_name)
    IoTHubRelayNode(node_name, rospy.get_param("~connection_string"))
    rospy.loginfo("IoT Hub Relay running as '%s'" % node_name)
    rospy.spin()

if __name__ == "__main__":
    sys.argv = rospy.myargv(argv=sys.argv)
    parser = argparse.ArgumentParser(description='Relay information and execute commands in a channel between Azure IoT Hub and ROS')
    parser.add_argument("-n", "--node_name", default='ros_azure_iothub', type=str, help='ROS Node Name')
    args = parser.parse_args()

    try:
        run_iot_hub_relay(args.node_name)
    except rospy.ROSInterruptException:
        pass
